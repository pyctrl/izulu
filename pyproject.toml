[project]
name = "izulu"
dynamic = ["version"]
description = "The exceptional library"
authors = [{ name = "Dima Burmistrov", email = "pyctrl.dev@gmail.com" }]
license = { file = "LICENSE" }
readme = "README.rst"

requires-python = ">=3.8"
classifiers = [
  "Programming Language :: Python :: 3",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed",
]
keywords = ["error", "exception", "oop", "izulu"]

[project.urls]
homepage = "https://github.com/pyctrl/izulu"
source = "https://github.com/pyctrl/izulu"
documentation = "https://izulu.readthedocs.io/en/latest/"
issues = "https://github.com/pyctrl/izulu/issues"


[project.optional-dependencies]
compatibility = ["typing-extensions>=4.5.0"]


[dependency-groups]
dev = [
  "ipython",
  "ruff",
  "mypy",
  "gitlint",
  "typing-extensions",
  { include-group = "docs" },
  { include-group = "tests" },
]

tests = [
  "pytest",
  "pytest-cov",
]

#rst = ["restructuredtext_lint", "Pygments"]
## readme:
##   rst
##   rst-include = `rst_include include <in> <out>`
##   docutils = `docutils README.rst README.html`

docs = [
  # base
  "sphinx",
  "sphinx-autobuild",
  # theme
  "pydata-sphinx-theme",
  # extensions
  "sphinx-copybutton",
  "sphinx-design",
  "sphinx-favicon",
  "sphinx-togglebutton",
  # project
  "setuptools-scm",
]

## release
#build = ["rst-include", "build", "twine"]
#upload = ["twine"]


[build-system]
requires = ["setuptools>=61.2", "setuptools-scm", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]


[tool.ruff]
target-version = "py38"
line-length = 79
extend-exclude = [".git", ".venv", "docs"]

[tool.ruff.lint]
preview = true
extend-select = ["ALL"]
extend-ignore = [
  "D10",   # missing documentation
  "D203",  # 1 of conflicting code-styles
  "D212",  # 1 of conflicting code-styles
  "C408",  # allow `dict()` instead of literal
  "TD003", # don't require issue link
  # Completely disable
  "FIX",
  "CPY",
  # formatter conflict rules
  "W191",
  "E111",
  "E114",
  "E117",
  "EM101",
  "EM102",
  "D206",
  "D300",
  "DOC201",
  "DOC402",
  "Q000",
  "Q001",
  "Q002",
  "Q003",
  "COM812",
  "COM819",
  "ISC001",
  "ISC002",
  "TRY003",
  "UP006",
  "UP007",
  "UP035",
  "UP045",
  "FA100",
]

[tool.ruff.lint.extend-per-file-ignores]
"**/tests/*" = [
  "S101",    # allow assert
  "SLF001",  # allow private member access
  "ANN",     # annotations not required in tests
  "PLR0913", # Too many arguments in function definition
  "PLR0917", # Too many positional arguments
  "PLC2701", # Private name import
]
"tests/error/test_dumping.py" = ["S301", "S403"]

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
"typing" = "t"

[tool.ruff.lint.flake8-import-conventions]
banned-from = ["typing"]

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"


[tool.coverage.run]
branch = true

[tool.coverage.report]
include_namespace_packages = true
# Regexes for lines to exclude from consideration
omit = ["*/.venv/*"]
exclude_also = [
  # Don't complain about missing debug-only code:
  "def __repr__",

  # Don't complain if tests don't hit defensive assertion code:
  "raise NotImplementedError",

  # Don't complain if non-runnable code isn't run:
  "if __name__ == .__main__.:",

  # Don't complain about abstract methods, they aren't run:
  "@(abc\\.)?abstractmethod",

  "if TYPE_CHECKING:",
]

[tool.mypy]
strict = true
exclude = ["docs", "tests", ".venv"]


#[tool.tox]
## requires = ["tox>4.23", "tox-uv>=1.13"]
## runner = "uv-venv-lock-runner"
#requires = ["tox>4.23"]
#env_list = ["pep8", "rst", "py312", "mypy"]
#use_develop = true

#[tool.tox.env.rst]
#skip_install = true
#dependency_groups = ["rst"]
#commands = [
#  [
#    "rst-lint",
#    { replace = "posargs", extend = true },
#    "{tox_root}{/}README.rst",
#  ],
#]

#[tool.tox.env.build]
#skip_install = true
#dependency_groups = ["build"]
#commands = [
#  [
#    "rst_include",
#    "include",
#    "README.tpl.rst",
#    "README.rst",
#  ],
#  [
#    "python3",
#    "-m",
#    "build",
#    { replace = "posargs", extend = true },
#  ],
#  [
#    "python3",
#    "-m",
#    "twine",
#    "check",
#    { replace = "posargs", extend = true },
#    "dist{/}*",
#  ],
#]
#
#[tool.tox.env.upload_test]
#skip_install = true
#dependency_groups = ["upload"]
#commands = [
#  [
#    "python3",
#    "-m",
#    "twine",
#    "upload",
#    { replace = "posargs", extend = true },
#    "--repository",
#    "{env:PYPI_REPOSITORY:testpypi}",
#    "dist{/}*",
#  ],
#]
#
#[tool.tox.env.upload_prod]
#base = ["tool.tox.env.upload_test"]
#set_env.PYPI_REPOSITORY = "pypi"


# Tox config
[tool.tox]
requires = ["tox>=4.23", "tox-uv>=1.13"]
runner = "uv-venv-lock-runner"
skip_missing_interpreters = true
env_list = [
  "py38",
  "py39",
  "py310",
  "py311",
  "py312",
  "py313",
  "fmt-py",
  "fmt-toml",
  "lint-py",
  "lint-mypy",
  "lint-toml",
  "lint-yaml",
  "lint-git",
  "coverage",
]

[tool.tox.labels]
fmt = [
  "fmt-py",
  "fmt-toml",
]
lint = [
  "lint-py",
  "lint-mypy",
  "lint-toml",
  "lint-yaml",
  "lint-git",
]

[tool.tox.env_run_base]
description = "Run unit tests with coverage report ({env_name})"
dependency_groups = ["tests"]
commands = [
  [
    "pytest",
    "--cov={[project]name}",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "tests",
    { replace = "posargs", default = ["--cov-report=xml:coverage.xml"], extend = true },
  ],
]


[tool.tox.env.init]
description = "Configure developer's environment"
skip_install = true
commands = [
  ["uv", "--quiet", "run", "pre-commit", "install"],
  ["uv", "--quiet", "run", "gitlint", "install-hook"],
]

[tool.tox.env.lint-py]
description = "Lint python files"
deps = ["ruff"]
skip_install = true
commands = [
  ["ruff", "format", "--diff", { replace = "posargs", default = ["{tox_root}"], extend = true }],
  ["ruff", "check", { replace = "posargs", default = ["{tox_root}"], extend = true }],
]

[tool.tox.env.lint-mypy]
description = "Type checking"
deps = ["mypy"]
commands = [["mypy", { replace = "posargs", default = ["{tox_root}"], extend = true }]]

[tool.tox.env.lint-toml]
description = "Lint TOML files"
allowlist_externals = ["taplo"]
skip_install = true
commands = [
  ["taplo", "lint", { replace = "posargs", extend = true }],
  ["taplo", "format", "--check", "--diff", { replace = "posargs", extend = true }],
]

[tool.tox.env.lint-yaml]
description = "Lint YAML files"
deps = ["yamllint"]
skip_install = true
commands = [["yamllint", "--strict", { replace = "posargs", default = ["{tox_root}"], extend = true }]]

[tool.tox.env.lint-git]
description = "Lint git branch commits"
skip_install = true
commands = [["uv", "--quiet", "run", "gitlint", "--commits", "HEAD~10..HEAD"]]

[tool.tox.env.pre-commit]
description = "Run pre-commit"
skip_install = true
deps = ["pre-commit-uv"]
commands = [
  [
    "pre-commit",
    "run",
    { replace = "posargs", default = ["--all-files", "--show-diff-on-failure"], extend = true },
  ],
]

[tool.tox.env.fmt-py]
description = "Format python files"
deps = ["ruff"]
skip_install = true
commands = [
  [
    "ruff",
    "format",
    { replace = "posargs", default = ["{tox_root}"], extend = true },
  ],
  [
    "ruff",
    "check",
    "--fix",
    "--show-fixes",
    { replace = "posargs", default = ["{tox_root}"], extend = true },
  ],
]

[tool.tox.env.fmt-toml]
description = "Format TOML files"
allowlist_externals = ["taplo"]
skip_install = true
commands = [["taplo", "format", { replace = "posargs", extend = true }]]

[tool.tox.env.docs]
dependency_groups = ["docs"]
commands = [
  [
    "sphinx-build",
    "-M",
    "html",
    "{tox_root}/docs/source",
    "{tox_root}/docs/build",
    "--fail-on-warning",
  ],
]

[tool.tox.env.docs-serve]
dependency_groups = ["docs"]
commands = [
  [
    "sphinx-autobuild",
    "-M",
    "html",
    "{tox_root}/docs/source",
    "{tox_root}/docs/build",
    "--fail-on-warning",
  ],
]

[tool.tox.env.clean]
dependency_groups = []
skip_install = true
allowlist_externals = ["rm"]
commands = [
  [
    "rm",
    "-rf",
    "{tox_root}/.coverage",
    "{tox_root}/coverage.xml",
    "{tox_root}/dist/",
    "{tox_root}/docs/build/",
    "{tox_root}/{[project]name}.egg-info/",
  ],
]
